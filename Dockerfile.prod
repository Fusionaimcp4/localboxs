# Proper Production Dockerfile for LocalBoxs
# Multi-stage build: lightweight, secure, and database-agnostic

# ---- Base image ----
  FROM node:18-alpine AS base
  WORKDIR /app
  
  # ---- Dependencies ----
  FROM base AS deps
  RUN apk add --no-cache libc6-compat
  COPY package.json package-lock.json* ./
  RUN npm install --omit=dev --legacy-peer-deps && npm cache clean --force
  
  # ---- Builder ----
  FROM base AS builder
  WORKDIR /app
  COPY package.json package-lock.json* ./
  RUN npm install --legacy-peer-deps && npm cache clean --force
  COPY . .
  
  # Accept database URL at build time (non-blocking)
  ARG DATABASE_URL
  ENV DATABASE_URL=${DATABASE_URL}
  
  # Generate Prisma client
  RUN npx prisma generate
  
  # Prevent DB connection during build
  ENV SKIP_DATABASE=true
  
  # Build application (no DB connection required here)
  RUN npm run build
  
  # ---- Runner ----
  FROM node:18-alpine AS runner
  WORKDIR /app
  ENV NODE_ENV=production
  ENV NEXT_TELEMETRY_DISABLED=1
  
  # Install dependencies for Prisma
  RUN apk add --no-cache libc6-compat openssl
  
  # Create non-root user
  RUN addgroup --system --gid 1001 nodejs \
   && adduser --system --uid 1001 nextjs
  
  # Copy production build artifacts
  COPY --from=builder --chown=nextjs:nodejs /app/.next ./.next
  COPY --from=builder --chown=nextjs:nodejs /app/public ./public
  COPY --from=builder --chown=nextjs:nodejs /app/package*.json ./
  COPY --from=builder --chown=nextjs:nodejs /app/node_modules ./node_modules
  
  # Copy additional required files
  COPY --from=builder --chown=nextjs:nodejs /app/lib ./lib
  COPY --from=builder --chown=nextjs:nodejs /app/components ./components
  
  # Copy Prisma Client and schema
  COPY --from=builder --chown=nextjs:nodejs /app/prisma ./prisma
  
  # Copy email templates and data
  COPY --from=builder --chown=nextjs:nodejs /app/emails ./emails
  COPY --from=builder --chown=nextjs:nodejs /app/data ./data
  
  # Regenerate Prisma Client for Alpine Linux
  RUN npx prisma generate
  
  # Switch to non-root user
  USER nextjs
  
  EXPOSE 3000
  ENV PORT=3000
  ENV HOSTNAME=0.0.0.0
  
  # Health check
  HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD wget -q --spider http://localhost:3000/api/health || exit 1
  
  # Default start command (for production)
  CMD ["npm", "start"]
  